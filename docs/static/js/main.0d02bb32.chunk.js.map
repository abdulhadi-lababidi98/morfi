{"version":3,"sources":["form-logo.svg","menu.svg","js/FormContainer.js","js/validators/validators.js","js/form/index.js","js/samples/first/PersonTable.js","js/fields/event-util.js","js/fields/Basic.js","js/fields/FormSelect.js","js/fields/FormNumberInput.js","js/icons/Eye.js","js/icons/Spinner.js","js/fields/FormInput.js","js/samples/first/FirstSample.js","js/tools/DisplayValues.js","js/samples/validation-types/ValidationSample.js","hooks/useSafeState.js","js/samples/async/AsyncValidationSample.js","js/icons/Arrow.js","js/samples/password-repeat/PasswordRepeatForm.js","js/App.js","index.js"],"names":["module","exports","__webpack_require__","p","FormContainer","_ref","children","toggleSideBar","react_default","a","createElement","className","src","menu","alt","onClick","logo","stringValidator","_ref$min","min","_ref$max","max","exactMessage","id","values","num","s","undefined","atMostMessage","atLeastMessage","v","val","length","regexValidator","_ref2","re","message","test","__regexNumberValidator","Validators","string","regex","number","_ref3","_ref3$minLength","minLength","_ref3$maxLength","maxLength","strValidator","str","String","email","optionalOf","validator","ValidationTypes","isPromise","obj","Boolean","then","validateField","field","completeFieldValidation","validators","syncError","promises","forEach","validationType","error","push","Promise","resolve","all","results","find","copyData","data","Object","objectSpread","errors","submitting","MorfiError","_Error","m","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","params","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","Error","captureStackTrace","assertThisInitialized","name","inherits","wrapNativeSuper","FormUtil","setSubmitting","oldData","result","update","fieldId","value","validateAll","validation","copy","keys","err","hasErrors","filter","key","isRequired","isValidationError","Form","type","_this2$props","_this2","props","_onFieldChangeAfterValidation","e","nextValue","nextError","_onChange","required","_onSubmit","event","preventDefault","validated","validatedData","_onSubmitAfterValidation","_onSubmitFailed","maybePromise","onSubmit","_finishSubmit","catch","nextData","_onSubmitFinished","onChange","onSubmitFailed","onSubmitFinished","_this$props","FC","Provider","Component","Field","onBlur","Morfi","create","initial","React","createContext","form_Form","assign","makeForm","Fields","reduce","r","Consumer","form_Field","makeField","PersonTable","renderPerson","person","index","gender","firstName","lastName","age","persons","map","EventUtil","cb","_ref$preventDefault","_ref$falsyToUndefined","falsyToUndefined","original","target","Label","label","_ref2$required","DisplayError","messages","red","replace","__","onActionWrap","Option","_identity","Select","serialize","_ref2$className","options","disabled","optionValues","o","i","getOptionValues","handlerRemapped","handler","optionValue","indexOf","currentIndex","option","Basic_Label","FormSelect_Option","Basic_DisplayError","FormSelect","rest","objectWithoutProperties","formProps","FormSelect_Select","NumberInput","autoFocus","Number","FormNumberInput","fieldProps","FormNumberInput_NumberInput","Eye","stroked","color","viewBox","d","transform","x1","y1","x2","y2","stroke","Spinner","x","y","width","height","cx","cy","strokeWidth","fill","clipPath","Input","_Component","args","state","showPassword","showPasswordToggle","setState","createClass","_this$props$value","_this$props$className","_this$props$type","placeholder","pending","Eye_Eye","Spinner_Spinner","FormInput","FormInput_Input","initialValues","genderOptions","FirstSample","toConsumableArray","onClear","FirstSample_Form","FormInput_FormInput","FormSelect_FormSelect","FormNumberInput_FormNumberInput","PersonTable_PersonTable","sanitize","htmlForObject","firstValue","JSON","stringify","DisplayValues","dangerouslySetInnerHTML","__html","ValidationTypeOptions","pw","validationFor","defineProperty","initialState","currentValidationType","ValidationSample","window","sleep","chooseValidationType","descriptionFor","ValidationSample_Form","DisplayValues_DisplayValues","useSafeState","_useState","useState","_useState2","slicedToArray","mounted","useRef","useEffect","current","useCallback","jackValidationCounter","userName","realName","alias","StaticValidations","_ref$userName","fakeServerRequest","toLowerCase","validateName","setPending","lowerCaseUserName","AsyncValidationSample","_useSafeState","_useSafeState2","pendingUserName","setPendingUserName","validateUserName","_useSafeState3","_useSafeState4","pendingAlias","setPendingAlias","validateAlias","setData","AsyncValidationSample_Form","rotationByDirection","UP","RIGHT","DOWN","LEFT","Arrow","_ref$direction","direction","strokeLinecap","href","password","RegExp","repeat","PasswordRepeatForm","PasswordRepeatForm_Form","Samples","pathname","App","sideBarOpen","componentDidUpdate","prevProps","location","Arrow_Arrow","activeClass","Link","to","sideBarFadeClass","renderSideBar","FormContainer_FormContainer","Switch","Route","path","component","ms","setTimeout","root","document","getElementById","ReactDOM","render","BrowserRouter","basename"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,k2DCa3BC,SAAgB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,cAAb,OACzBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,iBAAiBG,IAAI,OAAOC,QAASR,IAC/DC,EAAAC,EAAAC,cAAA,OAAKE,IAAKI,IAAML,UAAU,qBAAqBG,IAAI,SACnDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAd,qBAEHL,oBCVHW,EAAkB,SAAAZ,GAA8E,IAAAa,EAAAb,EAA3Ec,WAA2E,IAAAD,EAArE,EAAqEA,EAAAE,EAAAf,EAAlEgB,WAAkE,IAAAD,GAA3D,EAA2DA,EAC5FE,EACFH,IAAQE,EACF,CAAEE,GAAI,kCAAmCC,OAAQ,CAAEC,IAAKN,EAAKO,EAAW,IAARP,EAAY,GAAK,WACjFQ,EACJC,EAAgBN,GAAgB,CAClCC,GAAI,iCACJC,OAAQ,CAAEC,IAAKJ,EAAKK,EAAW,IAARL,EAAY,GAAK,MAEtCQ,EAAiBP,GAAgB,CACnCC,GAAI,kCACJC,OAAQ,CAAEC,IAAKN,EAAKO,EAAW,IAARP,EAAY,GAAK,MAE5C,OAAO,SAAAW,GACH,IAAMC,OAAYJ,IAANG,EAAkB,GAAKA,EACnC,OAAIT,GAAO,GAAKU,EAAIC,OAASX,EAClBO,EAEPG,EAAIC,OAASb,EACNU,OADX,IAMFI,EAAiB,SAAAC,GAAgF,IAA7EC,EAA6ED,EAA7EC,GAAIC,EAAyEF,EAAzEE,QAC1B,OAAO,SAAAN,GACH,IAAMC,OAAYJ,IAANG,EAAkB,GAAKA,EACnC,IAAKK,EAAGE,KAAKN,GACT,OAAOK,GAAW,CAAEb,GAAI,+BAK9Be,EAAyBL,EAAe,CAAEE,GAAI,QAASC,QAAS,CAAEb,GAAI,kCAyB/DgB,EAAa,CACtBC,OAAQvB,EACRwB,MAAOR,EACPS,OA1BoB,SAAAC,GAMC,IAAAC,EAAAD,EALrBE,iBAKqB,IAAAD,EALT,EAKSA,EAAAE,EAAAH,EAJrBI,UAKMC,EAAe/B,EAAgB,CAAEE,IAAK0B,EAAWxB,SADlC,IAAAyB,GAJR,EAIQA,IAErB,OAAO,SAAAf,GACH,IAAMkB,OAActB,IAARI,OAAoBJ,EAAYuB,OAAOnB,GAEnD,OADciB,EAAaC,IACXX,EAAuBW,KAgB3CE,MAAOlB,EAAe,CAClBE,GAAI,wCACJC,QAAS,CAAEb,GAAI,mCAEnB6B,WAhBe,SAAIC,GACnB,OAAO,SAAAtB,GACH,GAAIA,EACA,OAAOsB,EAAUtB,sBCfhBuB,EAAoC,CAAC,WAAY,SAAU,YAIlEC,EAAY,SAACC,GAAD,OAA4CC,QAAQD,GAA2B,oBAAbA,EAAIE,OAElFC,EAAgB,SAAIC,EAAiBP,GACvC,OAAOA,GAAaA,EAAUO,IAG5BC,EAA0B,SAC5BD,EACAE,GAEA,IACIC,EADEC,EAAW,GAgBjB,OAdAV,EAAgBW,QAAQ,SAAAC,GACpB,IAAKH,EAAW,CACZ,IAAMI,EAAQR,EAAcC,EAAOE,EAAWI,IAC1CC,IACIZ,EAAUY,GAEVH,EAASI,KAAKD,GAGdJ,EAAYI,MAKxBJ,IAGAC,EAAShC,OAAS,EACX,IAAIqC,QAAQ,SAAAC,GACfD,QAAQE,IAAIP,GAAUN,KAAK,SAACc,GACxBF,EAAQE,EAAQC,KAAKhB,mBAHjC,IASEiB,EAAW,SAAYC,GAEzB,MAAO,CAAEnD,OAAOoD,OAAAC,EAAA,EAAAD,CAAA,GAAOD,EAAKnD,QAAgBsD,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GAAMD,EAAKG,QAAUC,WAAYJ,EAAKI,aAGhFC,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAkC,IAAAC,EAAAC,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAAN,GAAA,QAAAO,EAAAC,UAAAxD,OAApByD,EAAoB,IAAAC,MAAAH,EAAA,EAAAA,EAAA,KAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAApBF,EAAoBE,EAAA,GAAAH,UAAAG,GAAA,OAC1CP,EAAAR,OAAAgB,EAAA,EAAAhB,CAAAU,MAAAH,EAAAP,OAAAiB,EAAA,EAAAjB,CAAAI,IAAAc,KAAAC,MAAAZ,EAAA,CAAAG,KAAMJ,GAANc,OAAYP,KACZQ,MAAMC,mBAAqBD,MAAMC,kBAANtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAQ,IAA8BJ,GACzDI,EAAKgB,KAAO,aAH8BhB,EADlD,OAAAR,OAAAyB,EAAA,EAAAzB,CAAAI,EAAAC,GAAAD,EAAA,CAAAJ,OAAA0B,EAAA,EAAA1B,CAAgCqB,QAQnBM,EAAW,CACpBhD,YAEAiD,cAAe,SAAOC,EAAsB1B,GACxC,IAAM2B,EAAsBhC,EAAS+B,GAErC,OADAC,EAAO3B,WAAaA,EACb2B,GAEXC,OAAQ,SAAOF,EAAsBG,EAAmBC,EAAY1C,GAChE,IAAMuC,EAAsBhC,EAAS+B,GAGrC,OAFAC,EAAOlF,OAAOoF,GAAWC,EACzBH,EAAO5B,OAAO8B,GAAWzC,EAClBuC,GAEX/C,gBACAE,0BACAiD,YAAa,SAAOnC,EAAmBoC,GACnC,IAAMC,EAAoBtC,EAASC,GAC7BX,EAAW,GAqBjB,OAnBAY,OAAOqC,KAAKF,GAAY9C,QAAQ,SAAC2C,GAC7B,IAAMzC,EAAQN,EAAwBc,EAAKnD,OAAOoF,GAAUG,EAAWH,IACnEzC,IACIZ,EAAUY,GACVH,EAASI,KACJD,EAAYT,KAAK,SAAAwD,GACVA,IACAF,EAAKlC,OAAO8B,GAAWM,MAKnCF,EAAKlC,OAAO8B,GAAYzC,KAOhCH,EAAShC,OAAS,EACX,IAAIqC,QAAQ,SAAAC,GACfD,QAAQE,IAAIP,GAAUN,KAAK,kBAAMY,EAAQ0C,OAK1CA,GAEXG,UAAW,SAAYxC,GAAZ,OACPC,OAAOqC,KAAKtC,EAAKG,QAAQsC,OAAO,SAACC,GAAD,YAAsC1F,IAArBgD,EAAKG,OAAOuC,KAAoBrF,OAAS,GAC9FsF,WAAY,SAAIxD,GAIZ,QAASA,GAAcL,QAAQI,OAAwBlC,EAAWmC,KAEtEyD,kBAxDoB,SAwDFL,GACd,OAAOA,aAAejB,OAAsB,eAAbiB,EAAId,OAKrCoB,6MACFb,OAA2B,SAACP,EAAcS,EAAOY,GAA+B,IAAAC,EAC/CC,EAAKC,MAA1BjD,EADoE+C,EACpE/C,KACFb,EAFsE4D,EAC9DX,WACgBX,GACxB/C,EAAYS,EAAaA,EAAW2D,QAAQ9F,EAC5CwC,EAAQoC,EAAS5C,cAAckD,EAAOxD,GAExCkD,EAAShD,UAAUY,IACfQ,EAAKnD,OAAO4E,KAAUS,GAEtBc,EAAKE,8BAA8BzB,EAAMS,OAAOlF,GAEnDwC,EAAYT,KAAK,SAAAoE,GACVH,EAAKC,MAAMjD,KAAKnD,OAAO4E,KAAUS,GAEjCc,EAAKE,8BAA8BzB,EAAMS,EAAOiB,MAIxDH,EAAKE,8BAA8BzB,EAAMS,EAAQ1C,MAIzD0D,8BAAgC,SAACzB,EAAgB2B,EAAgBC,GAA6B,IAClFrD,EAASgD,EAAKC,MAAdjD,MAIJA,EAAKnD,OAAO4E,KAAU2B,GAAcC,IAAcrD,EAAKG,OAAOsB,KAC9DuB,EAAKM,UAAU1B,EAASI,OAAOhC,EAAMyB,EAAM2B,EAAWC,OAG9DE,SAAoC,SAAC9B,GAAD,OAAkBG,EAASe,WAAWK,EAAKC,MAAMb,WAAWX,OAChG+B,UAAY,SAACC,GACTA,EAAMC,iBACN,IAAM1D,EAAOgD,EAAKC,MAAMjD,KACxBgD,EAAKM,UAAU1B,EAASC,cAAc7B,GAAM,IAC5C,IAAM2D,EAAY/B,EAASO,YAAYnC,EAAMgD,EAAKC,MAAMb,YACpDR,EAAShD,UAAU+E,GAClBA,EAAgB5E,KAAK,SAAA6E,GAClBZ,EAAKa,yBAAyBD,KAGlCZ,EAAKa,yBAA0BF,MAGvCE,yBAA2B,SAAC7D,GACxB,GAAK4B,EAASY,UAAUxC,GAapBA,EAAKI,YAAa,EAClB4C,EAAKM,UAAUtD,GACfgD,EAAKc,gBAAgB,IAAIzD,EAAW,qBAAsBL,OAf/B,CAC3B,IAAM+D,EAAef,EAAKC,MAAMe,SAAShE,EAAKnD,QAC1C+E,EAAShD,UAAUmF,GAClBA,EAAmBhF,KAAKiE,EAAKiB,eAAeC,MAAM,SAACf,GAChD,IAAMgB,EAAWvC,EAASC,cAAcmB,EAAKC,MAAMjD,MAAM,GACzDgD,EAAKM,UAAUa,GAEfnB,EAAKc,gBAAgBX,EAAGgB,KAG5BnB,EAAKiB,oBAQjBA,cAAgB,WACZ,IAAME,EAAWvC,EAASC,cAAcmB,EAAKC,MAAMjD,MAAM,GACzDgD,EAAKM,UAAUa,GACfnB,EAAKoB,kBAAkBD,MAE3Bb,UAAY,SAACtD,GACLgD,EAAKzC,GAAGyC,EAAKC,MAAMoB,SAASrE,MAEpC8D,gBAAkB,SAACX,EAA8BnD,GAAuC,IAC5EsE,EAAmBtB,EAAKC,MAAxBqB,eACJtB,EAAKzC,GAAK+D,GAAgBA,EAAenB,EAAGnD,MAEpDoE,kBAAoB,SAACpE,GAAuC,IAChDuE,EAAqBvB,EAAKC,MAA1BsB,iBACJvB,EAAKzC,GAAKgE,GAAkBA,EAAiBvE,MAOrDO,GAAI,wFAHAI,KAAKJ,GAAI,mCAKQ,IAAAiE,EACyB7D,KAAKsC,MAAvCjH,EADSwI,EACTxI,UAAWL,EADF6I,EACE7I,SAAUqE,EADZwE,EACYxE,KAAMyE,EADlBD,EACkBC,GACnC,OACI5I,EAAAC,EAAAC,cAAA,QAAMC,UAAWA,EAAWgI,SAAUrD,KAAK6C,WACvC3H,EAAAC,EAAAC,cAAC0I,EAAGC,SAAJ,CAAaxC,MAAO,CAAElC,OAAMgC,OAAQrB,KAAKqB,OAAQuB,SAAU5C,KAAK4C,WAAa5H,WA5F/DgJ,aA0GxBC,EAAQ,SAAAlJ,GAAiF,IAA3EwG,EAA2ExG,EAA3EwG,MAAO1C,EAAoE9D,EAApE8D,MAAOiC,EAA6D/F,EAA7D+F,KAAM9F,EAAuDD,EAAvDC,SAAUqG,EAA6CtG,EAA7CsG,OAC9C,OAAOrG,EAAS,CACZ0I,SAAU,SAAAlH,GAAC,OAAI6E,EAAOP,EAAMtE,EAAG,aAC/B0H,OAAQ,SAAA1H,GAAC,OAAI6E,EAAOP,EAAMtE,EAAG,WAC7B+E,QACA1C,QACA+D,UAAUA,EAN6E7H,EAArC6H,UAM/B9B,MAqCdqD,EAAQ,CAAEC,OAVR,SAAYC,GACvB,IAAMP,EAAKQ,IAAMC,cAAc,CAAElF,KAAM,CAAEnD,OAAQmI,EAAS7E,OAAQ,MAMlE,MAAO,CAAE0C,KAZI,SAAY4B,GAEzB,OADoB,SAACjJ,GAAD,OAAqBK,EAAAC,EAAAC,cAACoJ,EAADlF,OAAAmF,OAAA,GAAU5J,EAAV,CAAaiJ,GAAIA,MAM7CY,CAASZ,GAKPa,OAJKrF,OAAOqC,KAAK0C,GAASO,OAAO,SAACC,EAAW/D,GAExD,OADA+D,EAAE/D,GA3BQ,SAAeA,EAAgBgD,GAe7C,OAdqB,SAACjJ,GAAD,OACjBK,EAAAC,EAAAC,cAAC0I,EAAGgB,SAAJ,KACK,SAAAlI,GAAA,IAAGyC,EAAHzC,EAAGyC,KAAMgC,EAATzE,EAASyE,OAAQuB,EAAjBhG,EAAiBgG,SAAjB,OACG1H,EAAAC,EAAAC,cAAC2J,EAAD,CACI/J,SAAUH,EAAEG,SACZ8F,KAAMA,EACNO,OAAQA,EACRuB,SAAUA,EACVrB,MAAOlC,EAAKnD,OAAO4E,GACnBjC,MAAOQ,EAAKG,OAAOsB,QAiBrBkE,CAAUlE,EAAMgD,GACnBe,GACR,MAIwBhD,UAAWZ,EAASY,UAAWI,kBAAmBhB,EAASgB,mBCjTrEgD,6MACjBC,aAAe,SAACC,EAAgBC,GAAjB,OACXlK,EAAAC,EAAAC,cAAA,MAAI2G,IAAKqD,GACLlK,EAAAC,EAAAC,cAAA,UAAK+J,EAAOE,QACZnK,EAAAC,EAAAC,cAAA,UAAK+J,EAAOG,WACZpK,EAAAC,EAAAC,cAAA,UAAK+J,EAAOI,UACZrK,EAAAC,EAAAC,cAAA,UAAK+J,EAAOK,+EAIC,IAAAnD,EAAArC,KACjB,OACI9E,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,mBAGRF,EAAAC,EAAAC,cAAA,aACK4E,KAAKsC,MAAMmD,QAAQC,IAAI,SAACP,EAAgBC,GAAjB,OAAmC/C,EAAK6C,aAAaC,EAAQC,cAtBhEpB,qBCe5B2B,EAXQ,SACjBC,GAEe,IAAA7K,EAAAmF,UAAAxD,OAAA,QAAAL,IAAA6D,UAAA,GAAAA,UAAA,GAD4D,GAC5D2F,EAAA9K,EADbgI,sBACa,IAAA8C,KAAAC,EAAA/K,EADUgL,wBACV,IAAAD,KACf,OAAO,SAAAhD,GACCC,GAAgBD,EAAMC,iBAC1B,IAAMiD,EAAWlD,EAAMmD,OAAO1E,MAC9BqE,EAAGG,EAAmBC,QAAY3J,EAAY2J,aCGzCE,EAAQ,SAAAtJ,GAAwE,IAArEuJ,EAAqEvJ,EAArEuJ,MAAqEC,EAAAxJ,EAA9DgG,gBAA8D,IAAAwD,KACzF,OAAOlL,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiB8K,GAASvD,EAAW,KAAO,MAG3DyD,EAAe,SAAAhJ,GAAwC,IAArCwB,EAAqCxB,EAArCwB,MAC3B,OAAO3D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAhBT,SAAAN,GAA0C,IAAvCkB,EAAuClB,EAAvCkB,GAAIC,EAAmCnB,EAAnCmB,OACjBkF,EAASkF,EAASrK,GAOtB,OANImF,GAAUlF,IACVkF,EAAS9B,OAAOqC,KAAKzF,GAAQ0I,OACzB,SAAC2B,EAAaxE,GAAd,OAA8BwE,EAAIC,QAAJ,IAAA9F,OAAgBqB,EAAhB,KAAwBnE,OAAO1B,EAAO6F,MACpEX,IAGDA,EAQoCqF,CAAG5H,KAKrC6H,EAAe,SAACd,GAAmE,IAAjD7C,IAAiD7C,UAAAxD,OAAA,QAAAL,IAAA6D,UAAA,KAAAA,UAAA,GAC5F,OAAO,SAAA4C,GACCC,GACAD,EAAMC,iBAEN6C,GACAA,EAAG9C,EAAMmD,OAAO1E,SCFtBoF,EAAS,SAAA5L,GAAA,IAAGoL,EAAHpL,EAAGoL,MAAO5E,EAAVxG,EAAUwG,MAAV,OAAwDrG,EAAAC,EAAAC,cAAA,UAAQmG,MAAOA,GAAQ4E,IAExFS,EAAY,SAAApK,GAAC,OAAIA,GAQVqK,EAAS,SAAAjK,GAWA,IAVlB2E,EAUkB3E,EAVlB2E,MACAuF,EASkBlK,EATlBkK,UACAX,EAQkBvJ,EARlBuJ,MACAtH,EAOkBjC,EAPlBiC,MAOkBuH,EAAAxJ,EANlBgG,gBAMkB,IAAAwD,KAAAW,EAAAnK,EALlBvB,iBAKkB,IAAA0L,EALN,aAKMA,EAJlBrD,EAIkB9G,EAJlB8G,SACAQ,EAGkBtH,EAHlBsH,OACA8C,EAEkBpK,EAFlBoK,QACAC,EACkBrK,EADlBqK,SAEMC,EAlBc,SAAIF,EAA0CF,GAA9C,OACpBE,EACKtB,IAAI,SAAAyB,GAAC,OAAIA,EAAE5F,QACXmE,IAAIoB,GAAaF,GACjBlB,IAAI,SAAClJ,EAAG4K,GAAJ,YAAiB/K,IAANG,EAAkB,GAAkB,kBAANA,EAAiBA,EAAIoB,OAAOwJ,KAczDC,CAAgBL,EAASF,GACxCQ,EAAkB,SAAAC,GAAO,OAAI,SAACC,GAAD,OAC/BD,GAAWA,EAAQP,EAAQE,EAAaO,QAAQD,IAAcjG,SAC5DmG,EAAeV,EAAQS,QAAQT,EAAQ7H,KAAK,SAAAwI,GAAM,OAAIA,EAAOpG,QAAUA,KAE7E,OACIrG,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,GACX8K,GAASjL,EAAAC,EAAAC,cAACwM,EAAU,CAAEzB,QAAOvD,aAC9B1H,EAAAC,EAAAC,cAAA,UACIC,UAAW,8BAAgCwD,EAAQ,cAAgB,IACnEoI,SAAUA,EACVvD,SAAUiC,EAAuB2B,EAAgB5D,IACjDQ,OAAQyB,EAAuB2B,EAAgBpD,IAC/C3C,MAAO2F,EAAaQ,IACnBV,EAAQtB,IAAI,SAACiC,EAAyBvC,GAA1B,OACTlK,EAAAC,EAAAC,cAACyM,EAAD,CAAQ1B,MAAOwB,EAAOxB,MAAO5E,MAAO2F,EAAa9B,GAAQrD,IAAKqD,OAGrEvG,GAAS3D,EAAAC,EAAAC,cAAC0M,EAAD,CAAcjJ,MAAOA,MAU9BkJ,EAAa,SAAA1K,GAAA,IAAM4G,EAAN5G,EAAM4G,MAAU+D,EAAhB1I,OAAA2I,EAAA,EAAA3I,CAAAjC,EAAA,kBACtBnC,EAAAC,EAAAC,cAAC6I,EAAD,KAAQ,SAAAiE,GAAS,OAAIhN,EAAAC,EAAAC,cAAC+M,EAAD7I,OAAAmF,OAAA,GAAYyD,EAAeF,OCnEvCI,EAAc,SAAArN,GAUH,IATpBwG,EASoBxG,EATpBwG,MACA4E,EAQoBpL,EARpBoL,MACAtH,EAOoB9D,EAPpB8D,MACA+D,EAMoB7H,EANpB6H,SACAvH,EAKoBN,EALpBM,UACAqI,EAIoB3I,EAJpB2I,SACAQ,EAGoBnJ,EAHpBmJ,OACAmE,EAEoBtN,EAFpBsN,UACApB,EACoBlM,EADpBkM,SAKA,OACI/L,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,GACX8K,GAASjL,EAAAC,EAAAC,cAACwM,EAAU,CAAEzB,QAAOvD,aAC9B1H,EAAAC,EAAAC,cAAA,QAAAkE,OAAAmF,OAAA,CACItC,KAAK,SACLZ,WAAiBlF,IAAVkF,EAAsB,GAAK3D,OAAO2D,GACzCmC,SAAUgD,EATE,SAAClK,GACrBkH,EAAe,KAANlH,OAAWH,EAAYiM,OAAO9L,MAS/B0H,OAAQwC,EAAaxC,GACrB7I,UAAW,gBAAkBwD,EAAQ,cAAgB,KACjD,CAAEwJ,YAAWpB,cAEpBpI,GAAS3D,EAAAC,EAAAC,cAAC0M,EAAD,CAAcjJ,MAAOA,MAO9B0J,EAAkB,SAAA3L,GAAA,IAAGqH,EAAHrH,EAAGqH,MAAU+D,EAAb1I,OAAA2I,EAAA,EAAA3I,CAAA1C,EAAA,kBAC3B1B,EAAAC,EAAAC,cAAC6I,EAAD,KAAQ,SAAAuE,GAAU,OAAItN,EAAAC,EAAAC,cAACqN,EAADnJ,OAAAmF,OAAA,GAAiB+D,EAAgBR,OClD9CU,EAAM,SAAA3N,GAAA,IAAG4N,EAAH5N,EAAG4N,QAAH,OACfzN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMuN,MAAM,eAAeC,QAAQ,WAC9C3N,EAAAC,EAAAC,cAAA,QACI0N,EAAE,0SACFC,UAAU,mBAEbJ,GAAWzN,EAAAC,EAAAC,cAAA,QAAM4N,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,OAAO,mBCPhDC,EAAU,kBACnBnO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUwN,QAAQ,eAC7B3N,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,YAAUa,GAAG,SACTf,EAAAC,EAAAC,cAAA,QAAMkO,EAAE,IAAIC,EAAE,IAAIC,MAAM,KAAKC,OAAO,QACpCvO,EAAAC,EAAAC,cAAA,QAAMkO,EAAE,KAAKC,EAAE,IAAIC,MAAM,KAAKC,OAAO,QACrCvO,EAAAC,EAAAC,cAAA,QAAMkO,EAAE,IAAIC,EAAE,KAAKC,MAAM,MAAMC,OAAO,SAG9CvO,EAAAC,EAAAC,cAAA,UAAQsO,GAAG,KAAKC,GAAG,KAAK9E,EAAE,KAAKuE,OAAO,eAAeQ,YAAY,KAAKC,KAAK,OAAOC,SAAS,kBCUtFC,GAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAlK,EAAAC,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAA+J,GAAA,QAAA9J,EAAAC,UAAAxD,OAAAuN,EAAA,IAAA7J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAA4J,EAAA5J,GAAAH,UAAAG,GAAA,OAAAP,EAAAR,OAAAgB,EAAA,EAAAhB,CAAAU,MAAAH,EAAAP,OAAAiB,EAAA,EAAAjB,CAAAyK,IAAAvJ,KAAAC,MAAAZ,EAAA,CAAAG,MAAAU,OAAAuJ,MACIC,MAAQ,CAAEC,cAAc,GAD5BrK,EAEIsK,mBAAqB,kBAAMtK,EAAKuK,SAAS,SAAAH,GAAK,MAAK,CAAEC,cAAeD,EAAMC,iBAF9ErK,EAGIqC,KAAO,iBAA2B,aAApBrC,EAAKwC,MAAMH,KAAsBrC,EAAKwC,MAAMH,KAAOrC,EAAKoK,MAAMC,aAAe,OAAS,YAHxGrK,EAAA,OAAAR,OAAAyB,EAAA,EAAAzB,CAAAyK,EAAAC,GAAA1K,OAAAgL,EAAA,EAAAhL,CAAAyK,EAAA,EAAAhI,IAAA,SAAAR,MAAA,WAIa,IAAAsC,EAcD7D,KAAKsC,MAdJiI,EAAA1G,EAEDtC,aAFC,IAAAgJ,EAEO,GAFPA,EAGDpE,EAHCtC,EAGDsC,MACAtH,EAJCgF,EAIDhF,MACA+D,EALCiB,EAKDjB,SALC4H,EAAA3G,EAMDxI,iBANC,IAAAmP,EAMW,aANXA,EAOD9G,EAPCG,EAODH,SACAQ,EARCL,EAQDK,OACAmE,EATCxE,EASDwE,UACApB,EAVCpD,EAUDoD,SAVCwD,EAAA5G,EAWD1B,YAXC,IAAAsI,EAWM,OAXNA,EAYDC,EAZC7G,EAYD6G,YACAC,EAbC9G,EAaD8G,QAEJ,OACIzP,EAAAC,EAAAC,cAAA,OAAKC,UAAWA,GACX8K,GAASjL,EAAAC,EAAAC,cAACwM,EAAU,CAAEzB,QAAOvD,aAC9B1H,EAAAC,EAAAC,cAAA,QAAAkE,OAAAmF,OAAA,CACIf,SAAUgD,EAAahD,GACvBQ,OAAQwC,EAAaxC,GACrB+C,SAAUA,EACV5L,UAAW,gBAAkBwD,EAAQ,cAAgB,IACrDsD,KAAMnC,KAAKmC,QACP,CAAEuI,cAAanJ,QAAO8G,eAEpB,aAATlG,GACGjH,EAAAC,EAAAC,cAAA,QAAMK,QAASuE,KAAKoK,oBAChBlP,EAAAC,EAAAC,cAACwP,EAAD,CAAKjC,QAAS3I,KAAKkK,MAAMC,gBAGhCQ,GAAWzP,EAAAC,EAAAC,cAACyP,EAAD,MACXhM,GAAS3D,EAAAC,EAAAC,cAAC0M,EAAD,CAAcjJ,MAAOA,SApC/CkL,EAAA,CAA2B/F,aA4Cd8G,GAAY,SAAA/P,GAAA,IAAGkJ,EAAHlJ,EAAGkJ,MAAU+D,EAAb1I,OAAA2I,EAAA,EAAA3I,CAAAvE,EAAA,kBACrBG,EAAAC,EAAAC,cAAC6I,EAAD,KAAQ,SAAAuE,GAAU,OAAItN,EAAAC,EAAAC,cAAC2P,GAADzL,OAAAmF,OAAA,GAAW+D,EAAgBR,OChD/CgD,GAA8B,CAAE1F,UAAW,OAAQC,SAAU,GAAIF,OAAQ,IAAKG,IAAK,OAEhErB,EAAMC,OAAO4G,IAA9B9I,WAAMyC,aAERlD,GAAa,CACf6D,UAAW,CAAE5B,SAAUzG,EAAWC,OAAO,CAAErB,IAAK,EAAGE,IAAK,MACxDwJ,SAAU,CAAErB,OAAQjH,EAAWC,OAAO,CAAErB,IAAK,EAAGE,IAAK,MACrDyJ,IAAK,CAAE9B,SAAUzG,EAAWG,OAAO,CAAEG,UAAW,EAAGE,UAAW,MAQ5DwN,GAAwC,CAAC,CAAE1J,MAAO,IAAK4E,MAAO,QAAU,CAAE5E,MAAO,IAAK4E,MAAO,WAE9E+E,8MACjBhB,MAA0B,CAAE7K,KAAM,CAAEnD,OAAQ8O,GAAexL,OAAQ,IAAMiG,QAAS,MAElF/B,SAAW,SAACrE,GAAD,OAAkCS,EAAKuK,SAAS,CAAEhL,YAE7DgE,SAAW,SAAAtI,GAAyD,IAAtDuK,EAAsDvK,EAAtDuK,UAAWC,EAA2CxK,EAA3CwK,SAAUF,EAAiCtK,EAAjCsK,OAC/BvF,EAAKuK,SAAS,CACV5E,QAAO,GAAA/E,OAAApB,OAAA6L,EAAA,EAAA7L,CAAMQ,EAAKoK,MAAMzE,SAAjB,CAA0B,CAAEJ,SAAQC,YAAWC,WAAUC,IAAK,UAI7E4F,QAAU,WACNtL,EAAKuK,SAAS,CAAEhL,KAAM,CAAEnD,OAAOoD,OAAAC,EAAA,EAAAD,CAAA,GAAM0L,GAAP,CAAsB1F,UAAW,KAAM9F,OAAQ,+EAI7E,IAAMH,EAAOW,KAAKkK,MAAM7K,KACxB,OACInE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACiQ,GAAD,CAAM5J,WAAYA,GAAYiC,SAAU1D,KAAK0D,SAAUrE,KAAMA,EAAMgE,SAAUrD,KAAKqD,UAC9EnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACkQ,GAAD,CAAWrH,MAAOU,GAAOW,UAAWa,MAAM,aAAa9K,UAAU,wBACjEH,EAAAC,EAAAC,cAACkQ,GAAD,CAAWrH,MAAOU,GAAOY,SAAUY,MAAM,YAAY9K,UAAU,yBAEnEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACmQ,EAAD,CACItH,MAAOU,GAAOU,OACd2B,QAASiE,GACT9E,MAAM,SACN9K,UAAU,wBAEdH,EAAAC,EAAAC,cAACoQ,EAAD,CAAiBvH,MAAOU,GAAOa,IAAKW,MAAM,MAAM9K,UAAU,yBAE9DH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyB8G,KAAK,SAAS1G,QAASuE,KAAKoL,SAAvE,SAGAlQ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB4L,SAAU9C,EAAMtC,UAAUxC,IAA9D,YAKRnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACqQ,EAAD,CAAahG,QAASzF,KAAKkK,MAAMzE,mBA3CZzB,sBCxBnC0H,UAAW,SAAC/N,GACd,OAAOA,EAAI6I,QAAQ,KAAM,QAAQA,QAAQ,KAAM,UAG7CmF,GAAgB,SAACxE,GACnB,IAAI/F,EAAS,gCACTwK,GAAa,EA8BjB,OA7BAtM,OAAOqC,KAAKwF,GAAGxI,QAAQ,SAACoD,GACpB,IAAMR,EAAQ4F,EAAEpF,GAChB,QAAc1F,IAAVkF,EAAqB,CAOrB,GANKqK,EAGDA,GAAa,EAFbxK,GAAU,WAIdA,GAAM,sBAAAV,OAA0BqB,EAA1B,aACQ,OAAVR,EAEA,YADAH,GAAU,kCAGd,cAAeG,GACX,IAAK,SAED,YADAH,GAAM,yBAAAV,OAA6BgL,GAASnK,GAAtC,aAEV,IAAK,UAED,YADAH,GAAM,yBAAAV,OAA6B9C,OAAO2D,GAApC,YAEV,IAAK,SAED,YADAH,GAAM,wBAAAV,OAA4Ba,EAA5B,YAEV,QACIH,GAAUsK,GAASG,KAAKC,UAAUvK,QAIlDH,GAAU,eAIO2K,oLAEb,OACI7Q,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAM4Q,wBAAyB,CAAEC,OAAQN,GAAc3L,KAAKsC,MAAMjD,KAAKnD,mBAJ5C8H,aCvCrCkI,GAA6D,CAC/D,CAAE/F,MAAO,WAAY5E,MAAO,YAC5B,CAAE4E,MAAO,SAAU5E,MAAO,UAC1B,CAAE4E,MAAO,WAAY5E,MAAO,aAwB1ByJ,GAA4B,CAAEnN,MAAO,GAAIsO,GAAI,OAE1BhI,EAAMC,OAAO4G,IAA9B9I,WAAMyC,aAERyH,GAAgB,SAACjK,GACnB,MAAO,CACHtE,MAAMyB,OAAA+M,GAAA,EAAA/M,CAAA,GAAI6C,EAAOlF,EAAWY,OAC5BsO,GAAG7M,OAAA+M,GAAA,EAAA/M,CAAA,GAAI6C,EAAOlF,EAAWE,MAAM,CAAEN,GAAI,oBAAqBC,QAAS,CAAEb,GAAI,mCAU3EqQ,GAAe,CACjBjN,KAAM,CAAEnD,OAAQ8O,GAAexL,OAAQ,IACvCiC,WAAY2K,GAAc,YAC1BG,sBAAuB,YAGdC,GAAb,SAAAxC,GAAA,SAAAwC,IAAA,IAAA3M,EAAAC,EAAAR,OAAAS,EAAA,EAAAT,CAAAU,KAAAwM,GAAA,QAAAvM,EAAAC,UAAAxD,OAAAuN,EAAA,IAAA7J,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAA4J,EAAA5J,GAAAH,UAAAG,GAAA,OAAAP,EAAAR,OAAAgB,EAAA,EAAAhB,CAAAU,MAAAH,EAAAP,OAAAiB,EAAA,EAAAjB,CAAAkN,IAAAhM,KAAAC,MAAAZ,EAAA,CAAAG,MAAAU,OAAAuJ,MACIC,MAA+BoC,GADnCxM,EAGI4D,SAAW,SAACrE,GAAD,OAAgCS,EAAKuK,SAAS,CAAEhL,UAH/DS,EAKIuD,SAAW,WAEP,OAAOoJ,OAAOC,MAAM,MAP5B5M,EAUI6M,qBAAuB,SAACxK,GACpBrC,EAAKuK,SAAS,CAAE5I,WAAY2K,GAAcjK,GAAOoK,sBAAuBpK,KAXhFrC,EAAA,OAAAR,OAAAyB,EAAA,EAAAzB,CAAAkN,EAAAxC,GAAA1K,OAAAgL,EAAA,EAAAhL,CAAAkN,EAAA,EAAAzK,IAAA,SAAAR,MAAA,WAeQ,IAAMlC,EAAOW,KAAKkK,MAAM7K,KAChBI,EAAeJ,EAAfI,WACR,OACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAC+M,EAAD,CACIhC,MAAM,6BACN9K,UAAU,gDACV2L,QAASkF,GACT3K,MAAOvB,KAAKkK,MAAMqC,sBAClB7I,SAAU1D,KAAK2M,uBAEnBzR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAtEN,SAAC8G,GACpB,OAAQA,GACJ,IAAK,WACD,MACI,6GAGR,IAAK,SACD,MAAO,gGACX,IAAK,WACD,MACI,2GAGR,QACI,MAAO,IAuD+ByK,CAAe5M,KAAKkK,MAAMqC,wBAC5DrR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACyR,GAAD,CAAMpL,WAAYzB,KAAKkK,MAAMzI,WAAYiC,SAAU1D,KAAK0D,SAAUrE,KAAMA,EAAMgE,SAAUrD,KAAKqD,UACzFnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAO9G,MACdsI,MAAM,QACNuE,YAAY,oCAEhBxP,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAOwH,GACdhK,KAAK,WACLgE,MAAM,WACNuE,YAAY,sBAEhBxP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB4L,SAAUxH,GAAc0E,EAAMtC,UAAUxC,IACxEnE,EAAAC,EAAAC,cAAA,YAAOqE,GAAcvE,EAAAC,EAAAC,cAACyP,EAAD,MAArB,cAIZ3P,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAC0R,GAAD,CAAezN,KAAMW,KAAKkK,MAAM7K,eAjD5DmN,EAAA,CAAsCxI,sBCxDzB+I,GAAe,SAAI1I,GAA0C,IAAA2I,EAC5CC,mBAAY5I,GADgC6I,EAAA5N,OAAA6N,GAAA,EAAA7N,CAAA0N,EAAA,GAC/D9C,EAD+DgD,EAAA,GACxD7C,EADwD6C,EAAA,GAEhEE,EAAUC,kBAAgB,GAahC,OAXAC,oBACI,kBAAM,WACFF,EAAQG,SAAU,IAEtB,IAOG,CAACrD,EAJasD,sBAAY,SAAChR,GAC9B4Q,EAAQG,SAAWlD,EAAS7N,IAC7B,MCNHiR,GAAwB,EAItBzC,GAA4B,CAAE0C,SAAU,GAAIC,SAAU,GAAIC,MAAO,OAE9CzJ,EAAMC,OAAO4G,IAA9B9I,WAAMyC,aAERkJ,GAAgD,CAClDF,SAAU,CACNjK,SAAUzG,EAAWa,WACjBb,EAAWE,MAAM,CACbN,GAAI,0CACJC,QAAS,CAAEb,GAAI,+DAMzBoH,GAAW,SAAAtI,GAAkD,IAAA+S,EAAA/S,EAA/C2S,gBAA+C,IAAAI,EAApC,GAAoCA,EAEzDC,EAAoBtB,OAAOC,MAAM,KACvC,MAvBgC,SAuBzBgB,EAASM,cACVD,EACAA,EAAkB3P,KAAK,WACnB,MAAM,IAAIuC,MAAM,mDAIxBsN,GAAe,SAACC,GAAD,OAAiC,SAACpN,GACnD,IAAMrC,EAAYxB,EAAWC,OAAO,CAAErB,IAAK,GAAzBoB,CAA8B6D,GAChD,GAAIrC,EACA,OAAOA,EAEX,IAAM0P,EAAqBrN,EAAWkN,cAGtC,OAFAE,GAAW,GArCyB,SAsCpCC,GAAyDV,KAClDhB,OAAOC,MAAM,KAAMtO,KAAK,WAE3B,OADA8P,GAAW,GAzCgB,QA0CvBC,EACO,CAAElS,GAAI,oDAAqDC,OAAQ,CAAEwR,SAAU5M,IA1C1D,SA2CrBqN,GAAyDV,GAAwB,IAAM,EACvF,CAAExR,GAAI,oDAAqDC,OAAQ,CAAEwR,SAAU5M,SADnF,MAMFsN,GAAwB,WAAM,IAAAC,EACOtB,IAAsB,GAD7BuB,EAAAhP,OAAA6N,GAAA,EAAA7N,CAAA+O,EAAA,GAChCE,EADgCD,EAAA,GACfE,EADeF,EAAA,GAEjCG,EAAmBjB,sBAAYS,GAAaO,GAAqB,IAFhCE,EAIC3B,IAAsB,GAJvB4B,EAAArP,OAAA6N,GAAA,EAAA7N,CAAAoP,EAAA,GAIhCE,EAJgCD,EAAA,GAIlBE,EAJkBF,EAAA,GAKjCG,EAAgBtB,sBAAYS,GAAaY,GAAkB,IAE3DpN,EAAa4L,iBAAM/N,OAAAC,EAAA,EAAAD,CAAA,GAClBuO,GADkB,CAErBH,SAAU,CAAExJ,OAAQuK,EAAkB/K,SAAUzG,EAAWC,OAAO,CAAErB,IAAK,KACzE+R,MAAO,CAAElK,SAAUoL,MAVgB9B,EAafC,mBAA+B,CAAE/Q,OAAQ8O,GAAexL,OAAQ,KAbjD0N,EAAA5N,OAAA6N,GAAA,EAAA7N,CAAA0N,EAAA,GAahC3N,EAbgC6N,EAAA,GAa1B6B,EAb0B7B,EAAA,GAejCvJ,EAAiB6J,sBAAY,SAAChL,GAChC2B,EAAMlC,kBAAkBO,IACpBuM,EAAQ,SAAAnS,GAAA,IAAGV,EAAHU,EAAGV,OAAQsD,EAAX5C,EAAW4C,OAAX,MAAyB,CAC7BtD,OAAOoD,OAAAC,EAAA,EAAAD,CAAA,GAAMpD,GACbsD,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GAAME,EAAP,CAAekO,SAAU,CAAEzR,GAAIuG,EAAE1F,eAEhD,IAEG8G,EAAmB4J,sBAAY,WACjCuB,EAAQ,CAAE7S,OAAQ8O,GAAexL,OAAQ,MAC1C,IAEKC,EAAeJ,EAAfI,WAER,OACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAC4T,GAAD,CACIvN,WAAYA,EAAW8L,QACvB7J,SAAUqL,EACV1P,KAAMA,EACNgE,SAAUA,GACVM,eAAgBA,EAChBC,iBAAkBA,GAClB1I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sCAAb,uEAEIH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,qBAHJ,gCAIIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBALJ,uCAMIF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,sBAPJ,+CASAF,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAO+I,SACd/C,QAAS4D,EACTpI,MAAM,+CACNuE,YAAY,uCAEhBxP,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAOiJ,MACdjD,QAASiE,EACTzI,MAAM,8CACNuE,YAAY,4BAEhBxP,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAOgJ,SACdxH,MAAM,YACNuE,YAAY,gCAEhBxP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB4L,SAAUxH,GAAc0E,EAAMtC,UAAUxC,IACvEI,GAAcvE,EAAAC,EAAAC,cAACyP,EAAD,MADnB,iBC1HtBoE,GAAsB,CACxBC,GAAI,EACJC,MAAO,GACPC,KAAM,IACNC,KAAM,KAGGC,GAAQ,SAAAvU,GAAA,IAAAwU,EAAAxU,EAAGyU,iBAAH,IAAAD,EAAe,KAAfA,EAAA,OACjBrU,EAAAC,EAAAC,cAAA,OAAKyN,QAAQ,cAAcW,MAAM,OAC7BtO,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,KAAGa,GAAG,WAAWwT,cAAc,QAAQrG,OAAO,eAAeQ,YAAY,MACrE1O,EAAAC,EAAAC,cAAA,QAAM4N,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,OACjCjO,EAAAC,EAAAC,cAAA,QAAM4N,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,OACjCjO,EAAAC,EAAAC,cAAA,QAAM4N,GAAG,KAAKC,GAAG,KAAKC,GAAG,KAAKC,GAAG,SAGzCjO,EAAAC,EAAAC,cAAA,OAAKsU,KAAK,YAAY3G,UAAS,UAAArI,OAAYuO,GAAoBO,IAAc,EAA9C,eCdjC/N,GAAa,CACfkO,SAAU,CACNjM,SAAU,SAAClH,GACP,OAAKA,EACDoT,OAAO,gBAAgB7S,KAAKP,GAAW,CAAEP,GAAI,0DAAjD,EADe,CAAEA,GAAI,oDAGzBiI,OAAQ,SAAC1H,GACL,OAAKA,GAAKA,EAAEE,OAAS,EAAU,CAAET,GAAI,iDAChC2T,OAAO,UAAU7S,KAAKP,IAAOoT,OAAO,aAAa7S,KAAKP,QAA3D,EACW,CAAEP,GAAI,mDAOvB+O,GAA8B,CAAE2E,SAAU,GAAIE,OAAQ,OAEnC1L,EAAMC,OAAO4G,IAA9B9I,WAAMyC,aAIR2H,GAAwC,CAAEjN,KAAM,CAAEnD,OAAQ8O,GAAexL,OAAQ,KAElEsQ,8MACjB5F,MAAQoC,KACR7K,0BACOA,IACHoO,OAAQ,CACJnM,SAAU,SAAClH,GACP,IAAKA,GAAKA,IAAMsD,EAAKoK,MAAM7K,KAAKnD,OAAOyT,SACnC,MAAO,CAAE1T,GAAI,oDAK7ByH,SAAW,SAACrE,GACJS,EAAKoK,MAAM7K,KAAKnD,OAAOyT,WAAatQ,EAAKnD,OAAOyT,SAChD7P,EAAKuK,SAAS,CAAEhL,KAAKC,OAAAC,EAAA,EAAAD,CAAA,GAAMD,EAAP,CAAaG,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GAAMD,EAAKG,OAAZ,CAAoBqQ,YAAQxT,QAEnEyD,EAAKuK,SAAS,CAAEhL,YAIxBgE,SAAW,kBAAYoJ,OAAOC,MAAM,QAEpC9I,iBAAmB,kBAAM9D,EAAKuK,SAASiC,6EAGnC,IAAMjN,EAAOW,KAAKkK,MAAM7K,KAChBI,EAAeJ,EAAfI,WACR,OACIvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAC2U,GAAD,CACItO,WAAYzB,KAAKyB,WACjBiC,SAAU1D,KAAK0D,SACfrE,KAAMA,EACNgE,SAAUrD,KAAKqD,SACfO,iBAAkB5D,KAAK4D,kBACvB1I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAOgL,SACdxJ,MAAM,WACNhE,KAAK,WACL9G,UAAU,wBAEdH,EAAAC,EAAAC,cAACkQ,GAAD,CACIrH,MAAOU,GAAOkL,OACd1J,MAAM,sBACNhE,KAAK,WACL9G,UAAU,yBAGlBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkB4L,SAAUxH,GAAc0E,EAAMtC,UAAUxC,IACvEI,GAAcvE,EAAAC,EAAAC,cAACyP,EAAD,MADnB,qBAlDwB7G,aCZ1CgM,GAAoB,CACtB,CAAEC,SAAU,IAAK9J,MAAO,gBACxB,CAAE8J,SAAU,oBAAqB9J,MAAO,oBACxC,CAAE8J,SAAU,oBAAqB9J,MAAO,oBACxC,CAAE8J,SAAU,6BAA8B9J,MAAO,wBAKhC+J,8MACjBhG,MAAQ,CAAEiG,iBAAa9T,KAEvBpB,cAAgB,kBAAM6E,EAAKuK,SAAS,SAAAH,GAAK,MAAK,CAAEiG,aAAcjG,EAAMiG,kBAuBpEC,mBAAqB,SAACC,GACdA,EAAUC,SAASL,WAAanQ,EAAKwC,MAAMgO,SAASL,UACpDnQ,EAAKuK,SAAS,CAAE8F,aAAa,oFAvBrB,IAAA9N,EAAArC,KACZ,OACI9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,OAAKK,QAASuE,KAAK/E,eACfC,EAAAC,EAAAC,cAACmV,GAAD,CAAOf,UAAU,WAGxBQ,GAAQtK,IAAI,SAAA3K,GAAiC,IAA9BkV,EAA8BlV,EAA9BkV,SAAU9J,EAAoBpL,EAApBoL,MAChBqK,EAAcnO,EAAKC,MAAMgO,SAASL,WAAaA,EAAW,UAAY,GAC5E,OACI/U,EAAAC,EAAAC,cAACqV,EAAA,EAAD,CAAMpV,UAAW,WAAamV,EAAaE,GAAIT,EAAUlO,IAAKkO,GACzD9J,uCAerB,IAAIwK,EAAmB,GAIvB,YAH+BtU,IAA3B2D,KAAKkK,MAAMiG,cACXQ,EAAmB3Q,KAAKkK,MAAMiG,YAAc,WAAa,aAGzDjV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,gCAAAqF,OAAkCiQ,IAAqB3Q,KAAK4Q,iBAC1E1V,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACyV,EAAD,CAAe5V,cAAe+E,KAAK/E,eAC/BC,EAAAC,EAAAC,cAAC0V,EAAA,EAAD,KACI5V,EAAAC,EAAAC,cAAC2V,EAAA,EAAD,CAAOC,KAAK,oBAAoBC,UAAWzE,KAC3CtR,EAAAC,EAAAC,cAAC2V,EAAA,EAAD,CAAOC,KAAK,oBAAoBC,UAAW7C,KAC3ClT,EAAAC,EAAAC,cAAC2V,EAAA,EAAD,CAAOC,KAAK,6BAA6BC,UAAWnB,KACpD5U,EAAAC,EAAAC,cAAC2V,EAAA,EAAD,CAAOE,UAAW/F,iBA/CjBlH,aCZjCyI,OAAOC,MAAQ,SAACwE,GAAD,OAA+B,IAAInS,QAAQ,SAAAC,GAAO,OAAImS,WAAWnS,EAASkS,MAEzF,IAAME,GAAOC,SAASC,eAAe,QAEjCF,IACAG,IAASC,OACLtW,EAAAC,EAAAC,cAACqW,EAAA,EAAD,CAAeC,SAAS,UACpBxW,EAAAC,EAAAC,cAAC2V,EAAA,EAAD,CAAOE,UAAWf,MAEtBkB","file":"static/js/main.0d02bb32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/form-logo.98e9ccc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/menu.79de7768.svg\";","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\nimport logo from '../form-logo.svg';\nimport menu from '../menu.svg';\nimport './FormContainer.css';\n\nexport const FormContainer = ({ children, toggleSideBar }: { children: React$Node, toggleSideBar: void => void }) => (\n    <div className=\"FormContainer row\">\n        <header className=\"FormContainer-header col-12\">\n            <img src={menu} className=\"sidebar-toggle\" alt=\"menu\" onClick={toggleSideBar} />\n            <img src={logo} className=\"FormContainer-logo\" alt=\"logo\" />\n            <h1 className=\"FormContainer-title\">Welcome to morfi</h1>\n        </header>\n        {children}\n    </div>\n);\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport type { ErrorMessage, Validator } from '../form';\n\nconst stringValidator = ({ min = 0, max = -1 }: { min?: number, max?: number }): Validator<string> => {\n    const exactMessage =\n        min === max\n            ? { id: 'validation.characters.exactly.x', values: { num: min, s: min === 1 ? '' : 's' } }\n            : undefined;\n    const atMostMessage = exactMessage || {\n        id: 'validation.characters.atMost.x',\n        values: { num: max, s: max === 1 ? '' : 's' },\n    };\n    const atLeastMessage = exactMessage || {\n        id: 'validation.characters.atLeast.x',\n        values: { num: min, s: min === 1 ? '' : 's' },\n    };\n    return v => {\n        const val = v === undefined ? '' : v;\n        if (max >= 0 && val.length > max) {\n            return atMostMessage;\n        }\n        if (val.length < min) {\n            return atLeastMessage;\n        }\n    };\n};\n\nconst regexValidator = ({ re, message }: { re: RegExp, message?: ErrorMessage }): Validator<string> => {\n    return v => {\n        const val = v === undefined ? '' : v;\n        if (!re.test(val)) {\n            return message || { id: 'validation.value.mismatch' };\n        }\n    };\n};\n\nconst __regexNumberValidator = regexValidator({ re: /^\\d*$/, message: { id: 'validation.value.onlyNumbers' } });\n\nconst numberValidator = ({\n    minLength = 0,\n    maxLength = -1,\n}: {\n    minLength?: number,\n    maxLength?: number,\n}): Validator<number> => {\n    const strValidator = stringValidator({ min: minLength, max: maxLength });\n    return val => {\n        const str = val === undefined ? undefined : String(val);\n        const error = strValidator(str);\n        return error || __regexNumberValidator(str);\n    };\n};\n\nconst optionalOf = <T>(validator: Validator<T>): Validator<T> => {\n    return val => {\n        if (val) {\n            return validator(val);\n        }\n    };\n};\n\nexport const Validators = {\n    string: stringValidator,\n    regex: regexValidator,\n    number: numberValidator,\n    email: regexValidator({\n        re: /^[a-zA-Z0-9.-]+@[a-zA-Z0-9]+\\.[a-z]+$/,\n        message: { id: 'validation.email.requirements' },\n    }),\n    optionalOf,\n};\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React, { Component } from 'react';\n\n// first all used flow types that are relevant for the package user\nexport type ErrorMessage = { id: string, values?: { [string]: mixed } };\ntype MaybeError = ErrorMessage | void;\nexport type Validator<F> = (F | void) => MaybeError | Promise<MaybeError>;\nexport type ValidationType = 'onChange' | 'onBlur' | 'onSubmit';\ntype FieldValidation<F> = $Shape<{| [ValidationType]: Validator<F> |}>;\nexport type FormValidation<V> = $Shape<$ObjMap<V, <F>(F) => FieldValidation<F>>>;\nexport type FormErrors<V> = $Shape<$ObjMap<V, () => ErrorMessage>>;\nexport type FormData<V> = {| values: V, errors: FormErrors<V>, submitting?: boolean |};\ntype FormProps<V: Object> = {|\n    className?: string,\n    validation: FormValidation<V>,\n    data: FormData<V>,\n    children: React$Node,\n    onChange: (FormData<V>) => void,\n    onSubmit: V => void | Promise<void>,\n    onSubmitFailed?: (Error, FormData<V>) => void,\n    onSubmitFinished?: (FormData<V>) => void,\n|};\nexport type iForm<V: Object> = React$ComponentType<FormProps<V>>;\nexport type FieldProps<F> = {|\n    onChange: F => void,\n    onBlur: F => void,\n    required: boolean,\n    value: F,\n    error?: MaybeError,\n|};\nexport type FieldChildren<F> = (FieldProps<F>) => React$Node;\ntype iFieldProps<F> = {| children: FieldChildren<F> |};\nexport type iField<F> = React$StatelessFunctionalComponent<iFieldProps<F>>;\nexport type TypeToField = <F>(F) => iField<F>;\nexport type FormFields<V: Object> = $ObjMap<V, TypeToField>;\nexport type FormContext<V: Object> = {| Form: iForm<V>, Fields: FormFields<V> |};\n\n// now all flow types that only used internally\ntype _FieldUpdater<V> = (name: $Keys<V>, value: any, type: ValidationType) => void;\ntype _FieldRequiredGetter<V> = (name: $Keys<V>) => boolean;\n\nexport const ValidationTypes: ValidationType[] = ['onChange', 'onBlur', 'onSubmit'];\n// no explicit promise detection, because we want to be able to use all other\n// promise frameworks (even if flow disallows this)\n// also promise.toString() === '[object Promise]' might not work on all browsers\nconst isPromise = (obj: any /* V | Promise<V> */): boolean => Boolean(obj && typeof obj.then === 'function');\n\nconst validateField = <F>(field: F | void, validator?: Validator<F>): MaybeError | Promise<MaybeError> => {\n    return validator && validator(field);\n};\n\nconst completeFieldValidation = <F>(\n    field: F | void,\n    validators: FieldValidation<F>\n): MaybeError | Promise<MaybeError> => {\n    const promises = [];\n    let syncError;\n    ValidationTypes.forEach(validationType => {\n        if (!syncError) {\n            const error = validateField(field, validators[validationType]);\n            if (error) {\n                if (isPromise(error)) {\n                    // there might come an error, we have to await\n                    promises.push(error);\n                } else {\n                    // errors from sync validations will be favoured\n                    syncError = error;\n                }\n            }\n        }\n    });\n    if (syncError) {\n        return syncError;\n    }\n    if (promises.length > 0) {\n        return new Promise(resolve => {\n            Promise.all(promises).then((results: any /* MaybeError[] */) => {\n                resolve(results.find(Boolean));\n            });\n        });\n    }\n};\n\nconst copyData = <V: Object>(data: FormData<V>): FormData<V> => {\n    // older flow versions (e.g. 0.54.0) can not handle destructuring of generics correctly\n    return { values: { ...(data.values: any) }, errors: { ...data.errors }, submitting: data.submitting };\n};\n\nexport class MorfiError extends Error {\n    constructor(m: string, ...params: Array<any>) {\n        super(m, ...params);\n        Error.captureStackTrace && Error.captureStackTrace(this, MorfiError);\n        this.name = 'MorfiError';\n    }\n}\n\nexport const FormUtil = {\n    isPromise,\n\n    setSubmitting: <V: *>(oldData: FormData<V>, submitting: boolean): FormData<V> => {\n        const result: FormData<V> = copyData(oldData);\n        result.submitting = submitting;\n        return result;\n    },\n    update: <V: *>(oldData: FormData<V>, fieldId: $Keys<V>, value: any, error?: ErrorMessage): FormData<V> => {\n        const result: FormData<V> = copyData(oldData);\n        result.values[fieldId] = value;\n        result.errors[fieldId] = error;\n        return result;\n    },\n    validateField,\n    completeFieldValidation,\n    validateAll: <V: *>(data: FormData<V>, validation: FormValidation<V>): FormData<V> | Promise<FormData<V>> => {\n        const copy: FormData<V> = copyData(data);\n        const promises = [];\n\n        Object.keys(validation).forEach((fieldId: string) => {\n            const error = completeFieldValidation(data.values[fieldId], validation[fieldId]);\n            if (error) {\n                if (isPromise(error)) {\n                    promises.push(\n                        (error: any).then(err => {\n                            if (err) {\n                                copy.errors[fieldId] = err;\n                            }\n                        })\n                    );\n                } else {\n                    copy.errors[fieldId] = (error: any);\n                }\n            }\n        });\n\n        // if we have still async validations in the pipeline, we have to wait\n        // for all to get resolved\n        if (promises.length > 0) {\n            return new Promise(resolve => {\n                Promise.all(promises).then(() => resolve(copy));\n            });\n        }\n\n        // no async validations, so we can handle this validation synchronous\n        return copy;\n    },\n    hasErrors: <V: Object>(data: FormData<V>): boolean =>\n        Object.keys(data.errors).filter((key: string) => data.errors[key] !== undefined).length > 0,\n    isRequired: <F>(validators?: FieldValidation<F>): boolean => {\n        // will return always true if there are triggered async validations.\n        // the user should make sure to always handle undefined synchronous,\n        // to avoid side effects on rendering\n        return !!validators && Boolean(completeFieldValidation(undefined, validators));\n    },\n    isValidationError(err: any): boolean {\n        return err instanceof Error && err.name === 'MorfiError';\n    },\n};\n\ntype _FormProps<V> = {| ...FormProps<V>, FC: any |};\nclass Form<V: Object> extends Component<_FormProps<V>> {\n    update: _FieldUpdater<V> = (name: string, value, type: ValidationType): void => {\n        const { data, validation } = this.props;\n        const validators = validation[name];\n        const validator = validators ? validators[type] : undefined;\n        const error = FormUtil.validateField(value, validator);\n\n        if (FormUtil.isPromise(error)) {\n            if (data.values[name] !== value) {\n                // new value -> clear the previous error and update immediately\n                this._onFieldChangeAfterValidation(name, value, undefined);\n            }\n            (error: any).then(e => {\n                if (this.props.data.values[name] === value) {\n                    // error corresponds to current value\n                    this._onFieldChangeAfterValidation(name, value, e);\n                }\n            });\n        } else {\n            this._onFieldChangeAfterValidation(name, value, (error: any));\n        }\n    };\n\n    _onFieldChangeAfterValidation = (name: $Keys<V>, nextValue: any, nextError?: ErrorMessage) => {\n        const { data } = this.props;\n        // if the value did not change AND\n        // we had already an error or our validator did not return any error\n        // -> we return undefined to avoid a store update\n        if (data.values[name] !== nextValue || (nextError && !data.errors[name])) {\n            this._onChange(FormUtil.update(data, name, nextValue, nextError));\n        }\n    };\n    required: _FieldRequiredGetter<V> = (name: string) => FormUtil.isRequired(this.props.validation[name]);\n    _onSubmit = (event: SyntheticEvent<*>): void => {\n        event.preventDefault();\n        const data = this.props.data;\n        this._onChange(FormUtil.setSubmitting(data, true));\n        const validated = FormUtil.validateAll(data, this.props.validation);\n        if (FormUtil.isPromise(validated)) {\n            (validated: any).then(validatedData => {\n                this._onSubmitAfterValidation(validatedData);\n            });\n        } else {\n            this._onSubmitAfterValidation((validated: any));\n        }\n    };\n    _onSubmitAfterValidation = (data: any /* _FormData<V> */): void => {\n        if (!FormUtil.hasErrors(data)) {\n            const maybePromise = this.props.onSubmit(data.values);\n            if (FormUtil.isPromise(maybePromise)) {\n                (maybePromise: any).then(this._finishSubmit).catch((e: Error) => {\n                    const nextData = FormUtil.setSubmitting(this.props.data, false);\n                    this._onChange(nextData);\n                    // pass the encountered uncatched error to onSubmitFailed\n                    this._onSubmitFailed(e, nextData);\n                });\n            } else {\n                this._finishSubmit();\n            }\n        } else {\n            data.submitting = false;\n            this._onChange(data);\n            this._onSubmitFailed(new MorfiError('validation failed'), data);\n        }\n    };\n    _finishSubmit = (): void => {\n        const nextData = FormUtil.setSubmitting(this.props.data, false);\n        this._onChange(nextData);\n        this._onSubmitFinished(nextData);\n    };\n    _onChange = (data: any /* _FormData<V> */): void => {\n        if (this.m) this.props.onChange(data);\n    };\n    _onSubmitFailed = (e: Error /* thrown object */, data: any /* _FormData<V> */): void => {\n        const { onSubmitFailed } = this.props;\n        if (this.m && onSubmitFailed) onSubmitFailed(e, data);\n    };\n    _onSubmitFinished = (data: any /* _FormData<V> */): void => {\n        const { onSubmitFinished } = this.props;\n        if (this.m && onSubmitFinished) onSubmitFinished(data);\n    };\n\n    componentWillUnmount(): void {\n        this.m = false;\n    }\n\n    m = true;\n\n    render(): React$Node {\n        const { className, children, data, FC } = this.props;\n        return (\n            <form className={className} onSubmit={this._onSubmit}>\n                <FC.Provider value={{ data, update: this.update, required: this.required }}>{children}</FC.Provider>\n            </form>\n        );\n    }\n}\n\ntype _iFieldProps<F> = {|\n    value: F,\n    error: MaybeError,\n    name: string,\n    update: (string, F, ValidationType) => void,\n    required: string => boolean,\n    ...iFieldProps<F>,\n|};\nconst Field = <F>({ value, error, name, children, update, required }: _iFieldProps<F>): any => {\n    return children({\n        onChange: v => update(name, v, 'onChange'),\n        onBlur: v => update(name, v, 'onBlur'),\n        value,\n        error,\n        required: required(name),\n    });\n};\n\nconst makeField = <V: Object, F>(name: $Keys<V>, FC: any): iField<F> => {\n    const FieldUpdater = (p: iFieldProps<F>) => (\n        <FC.Consumer>\n            {({ data, update, required }) => (\n                <Field\n                    children={p.children}\n                    name={name}\n                    update={update}\n                    required={required}\n                    value={data.values[name]}\n                    error={data.errors[name]}\n                />\n            )}\n        </FC.Consumer>\n    );\n    return FieldUpdater; // name for react dev tool\n};\n\nconst makeForm = <V: Object>(FC: any): iForm<V> => {\n    const FormUpdater = (p: FormProps<V>) => <Form {...p} FC={FC} />;\n    return FormUpdater; // name for react dev tool\n};\n\nconst create = <V: Object>(initial: V): FormContext<V> => {\n    const FC = React.createContext({ data: { values: initial, errors: {} } });\n    const Form = makeForm(FC);\n    const Fields: any = Object.keys(initial).reduce((r: Object, name: string) => {\n        r[name] = makeField(name, FC);\n        return r;\n    }, {});\n    return { Form, Fields };\n};\n\nexport const Morfi = { create, hasErrors: FormUtil.hasErrors, isValidationError: FormUtil.isValidationError };\n","// @flow\n\nimport React, { Component } from 'react';\n\nexport type Gender = 'M' | 'F';\nexport type Person = { gender: Gender, firstName: string, lastName: string, age: number };\n\ntype PersonTableProps = {| persons: Person[] |};\n\nexport default class PersonTable extends Component<PersonTableProps> {\n    renderPerson = (person: Person, index: number): React$Node => (\n        <tr key={index}>\n            <td>{person.gender}</td>\n            <td>{person.firstName}</td>\n            <td>{person.lastName}</td>\n            <td>{person.age}</td>\n        </tr>\n    );\n\n    render(): React$Node {\n        return (\n            <table className=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Gender</th>\n                        <th>Firstname</th>\n                        <th>Lastname</th>\n                        <th>Age</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.persons.map((person: Person, index: number) => this.renderPerson(person, index))}\n                </tbody>\n            </table>\n        );\n    }\n}\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\ntype Event = { preventDefault: Function, target: { value: any } };\ntype EventHandler = Event => void;\n\ntype CustomInputHandling = { preventDefault?: boolean, falsyToUndefined?: boolean };\n\nconst inputHandler = (\n    cb: any => mixed | void,\n    { preventDefault = true, falsyToUndefined = false }: CustomInputHandling = {}\n): EventHandler => {\n    return event => {\n        if (preventDefault) event.preventDefault();\n        const original = event.target.value;\n        cb(falsyToUndefined ? original || undefined : original);\n    };\n};\n\nexport const EventUtil = { inputHandler };\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\nimport type { ErrorMessage } from '../form';\nimport messages from '../../messages';\n\nexport const __ = ({ id, values }: ErrorMessage): string => {\n    let result = messages[id];\n    if (result && values) {\n        result = Object.keys(values).reduce(\n            (red: string, key: string) => red.replace(`{${key}}`, String(values[key])),\n            result\n        );\n    }\n    return result;\n};\n\nexport const Label = ({ label, required = false }: { label: string, required?: boolean }) => {\n    return <label className=\"control-label\">{label + (required ? ' *' : '')}</label>;\n};\n\nexport const DisplayError = ({ error }: { error: ErrorMessage }) => {\n    return <span className=\"invalid-feedback\">{__(error)}</span>;\n};\n\ntype EventHandler = (SyntheticInputEvent<*>) => void;\n\nexport const onActionWrap = (cb?: any => void, preventDefault: boolean = true): EventHandler => {\n    return event => {\n        if (preventDefault) {\n            event.preventDefault();\n        }\n        if (cb) {\n            cb(event.target.value);\n        }\n    };\n};\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\nimport React from 'react';\nimport type { ErrorMessage, iField } from '../form';\nimport { EventUtil } from './event-util';\nimport { DisplayError, Label } from './Basic';\n\nexport type SelectOption<T> = {| label: string, value: T |};\n\ntype CommonSelectProps<T> = {|\n    serialize?: T => string,\n    label?: string,\n    required?: boolean,\n    className?: string,\n    options: $ReadOnlyArray<SelectOption<T>>,\n    disabled?: boolean,\n|};\n\ntype SelectProps<T> = {|\n    value: T,\n    error?: ErrorMessage,\n    required?: boolean,\n    onChange?: T => void,\n    onBlur?: T => void,\n    ...CommonSelectProps<T>,\n|};\n\n/**\n * ATTENTION: Since react v16.6 you have to supply strings or numbers within <option> tags.\n *            So you should not use any placeholders inside the messages you use as\n *            label for the select options.\n */\nconst Option = ({ label, value }: { label: string, value: string }) => <option value={value}>{label}</option>;\n\nconst _identity = v => v;\n\nconst getOptionValues = <T>(options: $ReadOnlyArray<SelectOption<T>>, serialize?: T => string): string[] =>\n    options\n        .map(o => o.value)\n        .map(serialize || _identity)\n        .map((v, i) => (v === undefined ? '' : typeof v === 'string' ? v : String(i)));\n\nexport const Select = <T>({\n    value,\n    serialize,\n    label,\n    error,\n    required = false,\n    className = 'form-group',\n    onChange,\n    onBlur,\n    options,\n    disabled,\n}: SelectProps<T>) => {\n    const optionValues = getOptionValues(options, serialize);\n    const handlerRemapped = handler => (optionValue: string) =>\n        handler && handler(options[optionValues.indexOf(optionValue)].value);\n    const currentIndex = options.indexOf(options.find(option => option.value === value));\n\n    return (\n        <div className={className}>\n            {label && <Label {...{ label, required }} />}\n            <select\n                className={'form-control custom-select' + (error ? ' is-invalid' : '')}\n                disabled={disabled}\n                onChange={EventUtil.inputHandler(handlerRemapped(onChange))}\n                onBlur={EventUtil.inputHandler(handlerRemapped(onBlur))}\n                value={optionValues[currentIndex]}>\n                {options.map((option: SelectOption<T>, index: number) => (\n                    <Option label={option.label} value={optionValues[index]} key={index} />\n                ))}\n            </select>\n            {error && <DisplayError error={error} />}\n        </div>\n    );\n};\n\ntype FormSelectProps<T> = {|\n    Field: iField<T>,\n    ...CommonSelectProps<T>,\n|};\n\nexport const FormSelect = <T>({ Field, ...rest }: FormSelectProps<T>) => (\n    <Field>{formProps => <Select {...formProps} {...rest} />}</Field>\n);\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\nimport { DisplayError, Label, onActionWrap } from './Basic';\nimport type { FieldProps, iField } from '../form';\n\ntype CommonNumberInputProps = {|\n    label?: string,\n    className?: string,\n    autoFocus?: boolean,\n    disabled?: boolean,\n|};\n\ntype NumberInputProps = {| ...FieldProps<number | void>, ...CommonNumberInputProps |};\n\nexport const NumberInput = ({\n    value,\n    label,\n    error,\n    required,\n    className,\n    onChange,\n    onBlur,\n    autoFocus,\n    disabled,\n}: NumberInputProps) => {\n    const onChangeWrapped = (v: string) => {\n        onChange(v === '' ? undefined : Number(v));\n    };\n    return (\n        <div className={className}>\n            {label && <Label {...{ label, required }} />}\n            <input\n                type=\"number\"\n                value={value === undefined ? '' : String(value)}\n                onChange={onActionWrap(onChangeWrapped)}\n                onBlur={onActionWrap(onBlur)}\n                className={'form-control' + (error ? ' is-invalid' : '')}\n                {...{ autoFocus, disabled }}\n            />\n            {error && <DisplayError error={error} />}\n        </div>\n    );\n};\n\ntype FormNumberInputProps = {| Field: iField<number | void>, ...CommonNumberInputProps |};\n\nexport const FormNumberInput = ({ Field, ...rest }: FormNumberInputProps) => (\n    <Field>{fieldProps => <NumberInput {...fieldProps} {...rest} />}</Field>\n);\n","// @flow\n\nimport React from 'react';\n\nexport const Eye = ({ stroked }: { stroked: boolean }) => (\n    <svg className=\"eye\" color=\"currentColor\" viewBox=\"0 0 8 8\">\n        <path\n            d=\"M4.03 0c-2.53 0-4.03 3-4.03 3s1.5 3 4.03 3c2.47 0 3.97-3 3.97-3s-1.5-3-3.97-3zm-.03 1c1.11 0 2 .9 2 2 0 1.11-.89 2-2 2-1.1 0-2-.89-2-2 0-1.1.9-2 2-2zm0 1c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1c0-.1-.04-.19-.06-.28-.08.16-.24.28-.44.28-.28 0-.5-.22-.5-.5 0-.2.12-.36.28-.44-.09-.03-.18-.06-.28-.06z\"\n            transform=\"translate(0 1)\"\n        />\n        {stroked && <line x1=\"0\" y1=\"8\" x2=\"8\" y2=\"0\" stroke=\"currentColor\" />}\n    </svg>\n);\n","// @flow\nimport React from 'react';\n\nexport const Spinner = () => (\n    <svg className=\"spinner\" viewBox=\"0 0 100 100\">\n        <defs>\n            <clipPath id=\"rects\">\n                <rect x=\"0\" y=\"0\" width=\"43\" height=\"100\" />\n                <rect x=\"57\" y=\"0\" width=\"43\" height=\"100\" />\n                <rect x=\"0\" y=\"50\" width=\"100\" height=\"50\" />\n            </clipPath>\n        </defs>\n        <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"currentColor\" strokeWidth=\"10\" fill=\"none\" clipPath=\"url(#rects)\" />\n    </svg>\n);\n","// @flow\n\nimport React, { Component } from 'react';\nimport { DisplayError, Label, onActionWrap } from '../fields/Basic';\nimport { Eye } from '../icons/Eye';\nimport { Spinner } from '../icons/Spinner';\nimport type { FieldProps, iField } from '../form';\n\ntype AllowedTypes = 'text' | 'password';\n\ntype CommonInputProps = {|\n    label?: string,\n    className?: string,\n    autoFocus?: boolean,\n    disabled?: boolean,\n    type?: AllowedTypes,\n    placeholder?: string,\n    pending?: boolean,\n|};\n\ntype InputProps = {| ...FieldProps<string>, ...CommonInputProps |};\n\nexport class Input extends Component<InputProps, { showPassword: boolean }> {\n    state = { showPassword: false };\n    showPasswordToggle = () => this.setState(state => ({ showPassword: !state.showPassword }));\n    type = () => (this.props.type !== 'password' ? this.props.type : this.state.showPassword ? 'text' : 'password');\n    render() {\n        const {\n            value = '',\n            label,\n            error,\n            required,\n            className = 'form-group',\n            onChange,\n            onBlur,\n            autoFocus,\n            disabled,\n            type = 'text',\n            placeholder,\n            pending,\n        } = this.props;\n        return (\n            <div className={className}>\n                {label && <Label {...{ label, required }} />}\n                <input\n                    onChange={onActionWrap(onChange)}\n                    onBlur={onActionWrap(onBlur)}\n                    disabled={disabled}\n                    className={'form-control' + (error ? ' is-invalid' : '')}\n                    type={this.type()}\n                    {...{ placeholder, value, autoFocus }}\n                />\n                {type === 'password' && (\n                    <span onClick={this.showPasswordToggle}>\n                        <Eye stroked={this.state.showPassword} />\n                    </span>\n                )}\n                {pending && <Spinner />}\n                {error && <DisplayError error={error} />}\n            </div>\n        );\n    }\n}\n\ntype FormInputProps = {| Field: iField<string>, ...CommonInputProps |};\n\nexport const FormInput = ({ Field, ...rest }: FormInputProps) => (\n    <Field>{fieldProps => <Input {...fieldProps} {...rest} />}</Field>\n);\n","// @flow\n\nimport React, { Component } from 'react';\nimport { Validators } from '../../validators/validators';\nimport { Morfi, type FormData } from '../../form/index';\nimport type { Gender, Person } from './PersonTable';\nimport PersonTable from './PersonTable';\nimport type { SelectOption } from '../../fields/FormSelect';\nimport { FormSelect } from '../../fields/FormSelect';\nimport { FormNumberInput } from '../../fields/FormNumberInput';\nimport { FormInput } from '../../fields/FormInput';\n\ntype MyFormValues = {|\n    firstName: string,\n    lastName: string,\n    gender: Gender,\n    age: number,\n|};\n\nconst initialValues: MyFormValues = { firstName: 'Nick', lastName: '', gender: 'M', age: 21 };\n\nconst { Form, Fields } = Morfi.create(initialValues);\n\nconst validation = {\n    firstName: { onChange: Validators.string({ min: 1, max: 10 }) },\n    lastName: { onBlur: Validators.string({ min: 1, max: 10 }) },\n    age: { onChange: Validators.number({ minLength: 1, maxLength: 3 }) },\n};\n\ntype FirstSampleState = {|\n    data: FormData<MyFormValues>,\n    persons: Person[],\n|};\n\nconst genderOptions: SelectOption<Gender>[] = [{ value: 'M', label: 'male' }, { value: 'F', label: 'female' }];\n\nexport default class FirstSample extends Component<{}, FirstSampleState> {\n    state: FirstSampleState = { data: { values: initialValues, errors: {} }, persons: [] };\n\n    onChange = (data: FormData<MyFormValues>) => this.setState({ data });\n\n    onSubmit = ({ firstName, lastName, gender }: MyFormValues): void => {\n        this.setState({\n            persons: [...this.state.persons, { gender, firstName, lastName, age: 1 }],\n        });\n    };\n\n    onClear = () => {\n        this.setState({ data: { values: { ...initialValues, firstName: '' }, errors: {} } });\n    };\n\n    render(): React$Node {\n        const { data } = this.state;\n        return (\n            <div className=\"col-12\">\n                <Form validation={validation} onChange={this.onChange} data={data} onSubmit={this.onSubmit}>\n                    <div className=\"row\">\n                        <FormInput Field={Fields.firstName} label=\"First name\" className=\"form-group col-sm-6\" />\n                        <FormInput Field={Fields.lastName} label=\"Last name\" className=\"form-group col-sm-6\" />\n                    </div>\n                    <div className=\"row\">\n                        <FormSelect\n                            Field={Fields.gender}\n                            options={genderOptions}\n                            label=\"Gender\"\n                            className=\"form-group col-sm-6\"\n                        />\n                        <FormNumberInput Field={Fields.age} label=\"Age\" className=\"form-group col-sm-6\" />\n                    </div>\n                    <div className=\"btn-toolbar\">\n                        <button className=\"btn btn-secondary mr-2\" type=\"button\" onClick={this.onClear}>\n                            Clear\n                        </button>\n                        <button className=\"btn btn-success\" disabled={Morfi.hasErrors(data)}>\n                            Submit\n                        </button>\n                    </div>\n                </Form>\n                <div className=\"mt-4\">\n                    <PersonTable persons={this.state.persons} />\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport type { FormData } from '../form/index';\nimport './DisplayValues.css';\n\nconst sanitize = (str: string): string => {\n    return str.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n};\n\nconst htmlForObject = (o: { [string]: mixed }): string => {\n    let result = '<p>{</p><div class=\"ml-3\"><p>';\n    let firstValue = true;\n    Object.keys(o).forEach((key: string) => {\n        const value = o[key];\n        if (value !== undefined) {\n            if (!firstValue) {\n                result += ',</p><p>';\n            } else {\n                firstValue = false;\n            }\n            result += `<span class=\"prop\">${key}</span>: `;\n            if (value === null) {\n                result += '<span class=\"null\">null</span>';\n                return;\n            }\n            switch (typeof value) {\n                case 'string':\n                    result += `<span class=\"string\">\"${sanitize(value)}\"</span>`;\n                    return;\n                case 'boolean':\n                    result += `<span class=\"boolean\">${String(value)}</span>`;\n                    return;\n                case 'number':\n                    result += `<span class=\"number\">${value}</span>`;\n                    return;\n                default:\n                    result += sanitize(JSON.stringify(value));\n            }\n        }\n    });\n    result += '</p></div>}';\n    return result;\n};\n\nexport default class DisplayValues extends Component<{ data: FormData<Object> }> {\n    render(): React$Node {\n        return (\n            <pre>\n                <code dangerouslySetInnerHTML={{ __html: htmlForObject(this.props.data.values) }} />\n            </pre>\n        );\n    }\n}\n","// @flow\n\nimport React, { Component } from 'react';\nimport { Validators } from '../../validators/validators';\nimport DisplayValues from '../../tools/DisplayValues';\nimport type { ValidationType } from '../../form';\nimport { Select } from '../../fields/FormSelect';\nimport type { SelectOption } from '../../fields/FormSelect';\nimport { Spinner } from '../../icons/Spinner';\nimport { FormInput } from '../../fields/FormInput';\nimport { Morfi, type FormData, type FormValidation } from '../../form';\n\nconst ValidationTypeOptions: Array<SelectOption<ValidationType>> = [\n    { label: 'onChange', value: 'onChange' },\n    { label: 'onBlur', value: 'onBlur' },\n    { label: 'onSubmit', value: 'onSubmit' },\n];\n\nconst descriptionFor = (type: ValidationType) => {\n    switch (type) {\n        case 'onChange':\n            return (\n                'This validation type will automatically make a ' +\n                'validation for each character you enter in the form fields.'\n            );\n        case 'onBlur':\n            return 'This validation type will automatically make a validation each time you leave the form field.';\n        case 'onSubmit':\n            return (\n                'This validation type will trigger the validators ' +\n                'as soon as the form data was requested to be submitted.'\n            );\n        default:\n            return '';\n    }\n};\n\ntype FormValues = {| email: string, pw: string |};\n\nconst initialValues: FormValues = { email: '', pw: '' };\n\nconst { Form, Fields } = Morfi.create(initialValues);\n\nconst validationFor = (type: ValidationType): FormValidation<FormValues> => {\n    return {\n        email: { [type]: Validators.email },\n        pw: { [type]: Validators.regex({ re: /^[a-zA-Z0-9]{8,}$/, message: { id: 'validation.pw.requirements' } }) },\n    };\n};\n\ntype ValidationSampleState = {|\n    data: FormData<FormValues>,\n    validation: FormValidation<FormValues>,\n    currentValidationType: ValidationType,\n|};\n\nconst initialState = {\n    data: { values: initialValues, errors: {} },\n    validation: validationFor('onChange'),\n    currentValidationType: 'onChange',\n};\n\nexport class ValidationSample extends Component<{}, ValidationSampleState> {\n    state: ValidationSampleState = initialState;\n\n    onChange = (data: FormData<FormValues>) => this.setState({ data });\n\n    onSubmit = (): Promise<void> => {\n        // simulate server request\n        return window.sleep(2000);\n    };\n\n    chooseValidationType = (type: any /* ValidationType <- is a problem with the used select component */) => {\n        this.setState({ validation: validationFor(type), currentValidationType: type });\n    };\n\n    render(): React$Node {\n        const data = this.state.data;\n        const { submitting } = data;\n        return (\n            <div className=\"col-12\">\n                <Select\n                    label=\"Choose the validation type\"\n                    className=\"validation-type-picker mt-3 mb-2 col-md-6 row\"\n                    options={ValidationTypeOptions}\n                    value={this.state.currentValidationType}\n                    onChange={this.chooseValidationType}\n                />\n                <p className=\"small font-italic\">{descriptionFor(this.state.currentValidationType)}</p>\n                <hr />\n                <Form validation={this.state.validation} onChange={this.onChange} data={data} onSubmit={this.onSubmit}>\n                    <div className=\"row\">\n                        <div className=\"col-md-6\">\n                            <FormInput\n                                Field={Fields.email}\n                                label=\"Email\"\n                                placeholder=\"Please enter your email address\"\n                            />\n                            <FormInput\n                                Field={Fields.pw}\n                                type=\"password\"\n                                label=\"Password\"\n                                placeholder=\"Set your password\"\n                            />\n                            <div className=\"btn-toolbar\">\n                                <button className=\"btn btn-success\" disabled={submitting || Morfi.hasErrors(data)}>\n                                    <span>{submitting && <Spinner />} Submit</span>\n                                </button>\n                            </div>\n                        </div>\n                        <div className=\"col-md-6 mt-3\">\n                            <DisplayValues data={this.state.data} />\n                        </div>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n","// @flow\n\nimport { useState, useRef, useEffect, useCallback } from 'react';\n\ntype UseSafeStateReturnType<T> = [T, (T) => void];\n\nexport const useSafeState = <T>(initial: T): UseSafeStateReturnType<T> => {\n    const [state, setState] = useState<T>(initial);\n    const mounted = useRef<boolean>(true);\n\n    useEffect(\n        () => () => {\n            mounted.current = false;\n        },\n        []\n    );\n\n    const safeSetState = useCallback((v: T) => {\n        mounted.current && setState(v);\n    }, []);\n\n    return [state, safeSetState];\n};\n","// @flow\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport { Validators } from '../../validators/validators';\nimport { Spinner } from '../../icons/Spinner';\nimport { FormInput } from '../../fields/FormInput';\nimport { Morfi, type FormData, type FormValidation } from '../../form';\nimport { useSafeState } from '../../../hooks/useSafeState';\n\n// some fake server state\nconst alreadyRegistered_userName = 'tom';\nconst everySecondTimeFailing_userName = 'jack';\nconst failingAfterSubmit_userName = 'mike';\nlet jackValidationCounter = 0;\n\ntype FormValues = {| userName: string, realName: string, alias: string |};\n\nconst initialValues: FormValues = { userName: '', realName: '', alias: '' };\n\nconst { Form, Fields } = Morfi.create(initialValues);\n\nconst StaticValidations: FormValidation<FormValues> = {\n    realName: {\n        onChange: Validators.optionalOf(\n            Validators.regex({\n                re: /^[a-zöüä][a-zöüä ]*$/i,\n                message: { id: 'AsyncValidationSample.realName.validation.requirements' },\n            })\n        ),\n    },\n};\n\nconst onSubmit = ({ userName = '' }: FormValues): Promise<void> => {\n    // simulate server request\n    const fakeServerRequest = window.sleep(1000);\n    return userName.toLowerCase() !== failingAfterSubmit_userName\n        ? fakeServerRequest\n        : fakeServerRequest.then(() => {\n              throw new Error('AsyncValidationSample.userName.submit.failed');\n          });\n};\n\nconst validateName = (setPending: boolean => void) => (name?: string) => {\n    const syncError = Validators.string({ min: 1 })(name);\n    if (syncError) {\n        return syncError;\n    }\n    const lowerCaseUserName = (name: any).toLowerCase();\n    setPending(true);\n    lowerCaseUserName === everySecondTimeFailing_userName && jackValidationCounter++;\n    return window.sleep(1000).then(() => {\n        setPending(false);\n        if (lowerCaseUserName === alreadyRegistered_userName) {\n            return { id: 'AsyncValidationSample.userName.already.registered', values: { userName: name } };\n        } else if (lowerCaseUserName === everySecondTimeFailing_userName && jackValidationCounter % 2 === 0) {\n            return { id: 'AsyncValidationSample.userName.already.registered', values: { userName: name } };\n        }\n    });\n};\n\nexport const AsyncValidationSample = () => {\n    const [pendingUserName, setPendingUserName] = useSafeState<boolean>(false);\n    const validateUserName = useCallback(validateName(setPendingUserName), []);\n\n    const [pendingAlias, setPendingAlias] = useSafeState<boolean>(false);\n    const validateAlias = useCallback(validateName(setPendingAlias), []);\n\n    const validation = useRef<FormValidation<FormValues>>({\n        ...StaticValidations,\n        userName: { onBlur: validateUserName, onChange: Validators.string({ min: 1 }) },\n        alias: { onChange: validateAlias },\n    });\n\n    const [data, setData] = useState<FormData<FormValues>>({ values: initialValues, errors: {} });\n\n    const onSubmitFailed = useCallback((e: Error): void => {\n        Morfi.isValidationError(e) ||\n            setData(({ values, errors }) => ({\n                values: { ...values },\n                errors: { ...errors, userName: { id: e.message } },\n            }));\n    }, []);\n\n    const onSubmitFinished = useCallback((): void => {\n        setData({ values: initialValues, errors: {} });\n    }, []);\n\n    const { submitting } = data;\n\n    return (\n        <div className=\"col-12\">\n            <Form\n                validation={validation.current}\n                onChange={setData}\n                data={data}\n                onSubmit={onSubmit}\n                onSubmitFailed={onSubmitFailed}\n                onSubmitFinished={onSubmitFinished}>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <p className=\"small font-italic form-group-apply\">\n                            ATTENTION: The validation succeeds for all names, but the following:\n                            <br />\n                            <strong>Tom</strong>: Validation fails each time.\n                            <br />\n                            <strong>Jack</strong>: Validation fails each second time.\n                            <br />\n                            <strong>Mike</strong>: Validation succeeds but submitting fails.\n                        </p>\n                        <FormInput\n                            Field={Fields.userName}\n                            pending={pendingUserName}\n                            label=\"Username (async validation triggers on blur)\"\n                            placeholder=\"Please enter your desired username\"\n                        />\n                        <FormInput\n                            Field={Fields.alias}\n                            pending={pendingAlias}\n                            label=\"Alias (async validation triggers on change)\"\n                            placeholder=\"Please enter some alias\"\n                        />\n                        <FormInput\n                            Field={Fields.realName}\n                            label=\"Real name\"\n                            placeholder=\"Please enter your real name\"\n                        />\n                        <div className=\"btn-toolbar\">\n                            <button className=\"btn btn-success\" disabled={submitting || Morfi.hasErrors(data)}>\n                                {submitting && <Spinner />} Submit\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </Form>\n        </div>\n    );\n};\n","// @flow\nimport React from 'react';\n\ntype Direction = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';\n\nconst rotationByDirection = {\n    UP: 0,\n    RIGHT: 90,\n    DOWN: 180,\n    LEFT: 270,\n};\n\nexport const Arrow = ({ direction = 'UP' }: { direction?: Direction }) => (\n    <svg viewBox=\"0 0 100 100\" width=\"1em\">\n        <defs>\n            <g id=\"arrow-up\" strokeLinecap=\"round\" stroke=\"currentColor\" strokeWidth=\"20\">\n                <line x1=\"50\" y1=\"10\" x2=\"50\" y2=\"90\" />\n                <line x1=\"10\" y1=\"50\" x2=\"50\" y2=\"10\" />\n                <line x1=\"90\" y1=\"50\" x2=\"50\" y2=\"10\" />\n            </g>\n        </defs>\n        <use href=\"#arrow-up\" transform={`rotate(${rotationByDirection[direction] || 0} 50 50)`} />\n    </svg>\n);\n","// @flow\n\nimport React, { Component } from 'react';\nimport { Spinner } from '../../icons/Spinner';\nimport { FormInput } from '../../fields/FormInput';\nimport { Morfi, type FormData } from '../../form';\n\nconst validation = {\n    password: {\n        onChange: (v?: string) => {\n            if (!v) return { id: 'PasswordRepeatForm.validation.password.required' };\n            if (RegExp('[^0-9a-zA-Z]').test(v)) return { id: 'PasswordRepeatForm.validation.password.validChars' };\n        },\n        onBlur: (v?: string) => {\n            if (!v || v.length < 8) return { id: 'PasswordRepeatForm.validation.password.length' };\n            if (!RegExp('[^0-9]').test(v) || !RegExp('[^a-zA-Z]').test(v))\n                return { id: 'PasswordRepeatForm.validation.password.mixed' };\n        },\n    },\n};\n\ntype MyFormValues = {| password: string, repeat: string |};\n\nconst initialValues: MyFormValues = { password: '', repeat: '' };\n\nconst { Form, Fields } = Morfi.create(initialValues);\n\ntype PasswordRepeatFormState = {| data: FormData<MyFormValues> |};\n\nconst initialState: PasswordRepeatFormState = { data: { values: initialValues, errors: {} } };\n\nexport default class PasswordRepeatForm extends Component<{}, PasswordRepeatFormState> {\n    state = initialState;\n    validation = {\n        ...validation,\n        repeat: {\n            onChange: (v?: string) => {\n                if (!v || v !== this.state.data.values.password)\n                    return { id: 'PasswordRepeatForm.validation.repeat.wrong' };\n            },\n        },\n    };\n\n    onChange = (data: FormData<MyFormValues>) => {\n        if (this.state.data.values.password !== data.values.password) {\n            this.setState({ data: { ...data, errors: { ...data.errors, repeat: undefined } } });\n        } else {\n            this.setState({ data });\n        }\n    };\n\n    onSubmit = (): void => window.sleep(1000);\n\n    onSubmitFinished = () => this.setState(initialState);\n\n    render(): React$Node {\n        const data = this.state.data;\n        const { submitting } = data;\n        return (\n            <div className=\"col-12\">\n                <Form\n                    validation={this.validation}\n                    onChange={this.onChange}\n                    data={data}\n                    onSubmit={this.onSubmit}\n                    onSubmitFinished={this.onSubmitFinished}>\n                    <div className=\"row\">\n                        <FormInput\n                            Field={Fields.password}\n                            label=\"Password\"\n                            type=\"password\"\n                            className=\"form-group col-sm-6\"\n                        />\n                        <FormInput\n                            Field={Fields.repeat}\n                            label=\"Password repetition\"\n                            type=\"password\"\n                            className=\"form-group col-sm-6\"\n                        />\n                    </div>\n                    <div className=\"btn-toolbar\">\n                        <button className=\"btn btn-success\" disabled={submitting || Morfi.hasErrors(data)}>\n                            {submitting && <Spinner />} Submit\n                        </button>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Link, Switch, Route } from 'react-router-dom';\nimport { FormContainer } from './FormContainer';\nimport FirstSample from './samples/first/FirstSample';\nimport { ValidationSample } from './samples/validation-types/ValidationSample';\nimport { AsyncValidationSample } from './samples/async/AsyncValidationSample';\nimport { Arrow } from './icons/Arrow';\nimport PasswordRepeatForm from './samples/password-repeat/PasswordRepeatForm';\n\ntype Sample = { pathname: string, label: string };\nconst Samples: Sample[] = [\n    { pathname: '/', label: 'First sample' },\n    { pathname: '/validation/types', label: 'Validation types' },\n    { pathname: '/validation/async', label: 'Async validation' },\n    { pathname: '/validation/passwordRepeat', label: 'Password repetition' },\n];\n\ntype AppProps = { location: { pathname: string } };\n\nexport default class App extends Component<AppProps, { sideBarOpen?: boolean }> {\n    state = { sideBarOpen: undefined };\n\n    toggleSideBar = () => this.setState(state => ({ sideBarOpen: !state.sideBarOpen }));\n\n    renderSideBar() {\n        return (\n            <div className=\"nav nav-pills row\">\n                <div className=\"nav-header\">\n                    <strong>Navigation</strong>\n                    <div onClick={this.toggleSideBar}>\n                        <Arrow direction=\"LEFT\" />\n                    </div>\n                </div>\n                {Samples.map(({ pathname, label }: Sample) => {\n                    const activeClass = this.props.location.pathname === pathname ? ' active' : '';\n                    return (\n                        <Link className={'nav-link' + activeClass} to={pathname} key={pathname}>\n                            {label}\n                        </Link>\n                    );\n                })}\n            </div>\n        );\n    }\n\n    componentDidUpdate = (prevProps: AppProps): void => {\n        if (prevProps.location.pathname !== this.props.location.pathname) {\n            this.setState({ sideBarOpen: false });\n        }\n    };\n\n    render(): React$Node {\n        let sideBarFadeClass = '';\n        if (this.state.sideBarOpen !== undefined) {\n            sideBarFadeClass = this.state.sideBarOpen ? ' fade-in' : ' fade-out';\n        }\n        return (\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className={`col-8 col-sm-4 app-navigation${sideBarFadeClass}`}>{this.renderSideBar()}</div>\n                    <div className=\"col-12\">\n                        <FormContainer toggleSideBar={this.toggleSideBar}>\n                            <Switch>\n                                <Route path=\"/validation/types\" component={ValidationSample} />\n                                <Route path=\"/validation/async\" component={AsyncValidationSample} />\n                                <Route path=\"/validation/passwordRepeat\" component={PasswordRepeatForm} />\n                                <Route component={FirstSample} />\n                            </Switch>\n                        </FormContainer>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","/**\n * This file is part of morfi which is released under MIT license.\n *\n * The LICENSE file can be found in the root directory of this project.\n *\n * @flow\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport './styles/css/bootstrap.min.css';\nimport './styles/css/bootstrap-grid.min.css';\nimport './index.css';\nimport App from './js/App';\n\nwindow.sleep = (ms: number): Promise<void> => new Promise(resolve => setTimeout(resolve, ms));\n\nconst root = document.getElementById('root');\n\nif (root) {\n    ReactDOM.render(\n        <BrowserRouter basename=\"/morfi\">\n            <Route component={App} />\n        </BrowserRouter>,\n        root\n    );\n}\n"],"sourceRoot":""}